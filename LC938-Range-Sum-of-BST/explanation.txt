IDEA:
=> Given a BST, our objective is to compute the sum of values falling within the inclusive range from 'low' to 'high'.
=> A straightforward approach involves traversing the tree using an inorder DFS traversal. Afterward, we can store the
   BST values in a sorted array. Subsequently, we iterate over this array, summing up values within the specified range.
=> However, this method incurs a time complexity of O(2*N) and requires O(2*N) space. Can we optimize this further?
=> Indeed, we can achieve a solution with both time and space complexities of O(N). To accomplish this, we'll compute 
   the sum directly during our tree traversal. During each recursive call, while traversing the tree, we'll also consider
   the 'low' and 'high' values. If the current root value falls within this range, we'll add it to our sum, and continue 
   the traversal accordingly.

TIME COMPLEXITY: O(N)
SPACE COMPLEXITY: O(N)
