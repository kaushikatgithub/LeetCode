IDEA:
=> First, based on the constraint, if the array size is less than 3, return 0 since the minimum required size for an AP is 3.

=> Iterate from 0 to n-2 to identify consecutive triplets in the array that form an AP. (Why?)

=> For example, in the array [1, 2, 3, 4, 5], the consecutive triplets are (1, 2, 3), (2, 3, 4), and (3, 4, 5). 
   Using these triplets, we can determine the number of APs of sizes 3, 4, and 5.

=> Visualization of APs for the array [1, 2, 3, 4, 5]:

   - APs of size 3:  [1, 2, 3, 4, 5] --> 3 APs
                     |-------|
                        |-------|
                           |-------|

   - APs of size 4:  [1, 2, 3, 4, 5] --> 2 APs
                     |----------|
                        |----------|

   - APs of size 5:  [1, 2, 3, 4, 5] --> 1 AP
                     |-------------|

=> Observing the pattern, if the count of triplets is 'n', the total number of APs is calculated as 'n*(n+1)/2'.

=> In general, the number of APs for 'n' consecutive triplets is determined by the formula: n*(n+1)/2.
   Consequently, for a specific number of consecutive triplets, we can ascertain the total number of APs in the array.

TIME COMPLEXITY   : O(N)
SPACE COMPLEXITY  : O(1)
