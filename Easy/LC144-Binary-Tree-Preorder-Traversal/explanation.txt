IDEA:
=> In a Binary Tree, both the left and right subtrees are also binary trees, making the simple recursive approach 
   effective. It operates in O(N) time and space.
=> Alternatively, we can use our own stack to perform iterative preorder traversal.
=> In the recursive approach, we add the current node's value to the answer vector and simultaneously navigate to 
   the leftmost child until it becomes NULL. After that, we move to the right subtree.
=> The same idea applies to the iterative approach. We add the current node's value to the answer and traverse to 
   the left of every node until the node's left is NULL. Then we move to the right. It's worth noting that a single
   variable is used for the current node to keep track of the right side of the current node.
=> Both approaches have the same time and space complexity.

TIME COMPLEXITY: O(N) 
SPACE COMPLEXITY: O(N) 
